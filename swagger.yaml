openapi: 3.0.3
info:
  title: Книгарня API
  description: API для управління книгами та авторами у книгарні
  version: 1.0.0
servers:
  - url: https://cryptic-garden-19358-66c5851b2ced.herokuapp.com/api
  - url: http://127.0.0.1:8000/api
tags:
  - name: books
    description: Операції з книгами
  - name: authors
    description: Операції з авторами
  - name: payment
    description: Проведення оплати
  - name: authentification
    description: Аутентифікація
paths:
  /books/:
    get:
      tags:
        - books
      summary: Отримати список книг
      description: Отримати список всіх книг у книгарні або книг, що відповідають заданим параметрам
      parameters:
        - name: title
          in: query
          required: false
          schema:
            type: string
        - name: genre
          in: query
          required: false
          schema:
            type: string
        - name: publication_date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: author
          in: query
          required: false
          schema:
            type: integer
        - name: price
          in: query
          required: false
          schema:
            type: integer
        - name: quantity
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/create/:
    post:
      security:
        - bearerAuth: []
      tags:
        - books
      summary: Додати нову книгу
      description: Додати нову книгу до книгарні
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Книга створена успішно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /books/{id}:
    get:
      tags:
        - books
      summary: Отримати деталі книги
      description: Отримати деталі конкретної книги за її ідентифікатором
      parameters:
        - name: id
          in: path
          description: Ідентифікатор книги
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Книга не знайдена
  /books/update/{id}/:
    put:
      security:
        - bearerAuth: []
      tags:
        - books
      summary: Оновити книгу
      description: Оновити існуючу книгу за її ідентифікатором
      parameters:
        - name: id
          in: path
          description: Ідентифікатор книги
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Книга оновлена успішно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Книга не знайдена
  /books/delete/{id}:
    delete:
      security:
        - bearerAuth: []
      tags:
        - books
      summary: Видалити книгу
      description: Видалити книгу за її ідентифікатором
      parameters:
        - name: id
          in: path
          description: Ідентифікатор книги
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Книга видалена успішно
        '404':
          description: Книга не знайдена
  /authors:
    get:
      tags:
        - authors
      summary: Отримати список авторів
      description: Отримати список всіх авторів у книгарні або авторів, що відповідають заданим параметрам
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /authors/create/:
    post:
      security:
        - bearerAuth: []
      tags:
        - authors
      summary: Додати нового автора
      description: Додати нового автора до книгарні
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
      responses:
        '201':
          description: Автор створений успішно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /authors/{id}:
    get:
      tags:
        - authors
      summary: Отримати деталі автора
      description: Отримати деталі конкретного автора за його ідентифікатором
      parameters:
        - name: id
          in: path
          description: Ідентифікатор автора
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Автор не
  /authors/update/{id}/:
    put:
      security:
        - bearerAuth: []
      tags:
        - authors
      summary: Оновити автора
      description: Оновити існуючого автора за його ідентифікатором
      parameters:
        - name: id
          in: path
          description: Ідентифікатор автора
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
      responses:
        '200':
          description: Автор оновлений успішно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Автор не знайдений
  /authors/delete/{id}:
    delete:
      security:
        - bearerAuth: []
      tags:
        - authors
      summary: Видалити автора
      description: Видалити автора за його ідентифікатором
      parameters:
        - name: id
          in: path
          description: Ідентифікатор автора
          required: true
          schema:
              type: integer
      responses:
        '204':
          description: Автор видалений успішно
        '404':
          description: Автор не знайдений
  /orders/:
    get:
      tags:
        - payment
      summary: Отримати список книг
      description: Отримати список всіх книг у книгарні або книг, що відповідають заданим параметрам
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
  /order/:
    post:
      tags:
        - payment
      summary: Place order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
            examples:
              "Buy one book with id 34":
                value:
                  order:
                    [ { "book_id": 34, "quantity": 1 } ]
              "Buy three books, one with id 4 and two with id 50":
                value:
                  order:
                    [ { "book_id": 4, "quantity": 1 }, { "book_id": 50, "quantity": 2 } ]
      responses:
        "200":
          description: Place order for a book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
  /users/register/:
    post:
      tags:
        - authentification
      summary: Реєстрація
      description: Реєстрація нового юзера
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterInput'
      responses:
        '201':
          description: Зеєстрація пройшла успішно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegister'
  /users/token/:
    post:
      tags:
        - authentification
      summary: Отримання токена
      description: Отримання токена для можливості публікувати, оновлювати та видаляти книги та авторів
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTokenInput'
      responses:
        '201':
          description: Токен успішно створенний
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToken'
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: 'Гордість і упередження'
        author:
          $ref: '#/components/schemas/Author'
        genre:
          type: string
          example: 'роман'
        publication_date:
          type: string
          format: date
          example: '1813-08-01'
        price:
          type: integer
          example: 50000
        quantity:
          type: integer
          example: 246
    BookInput:
      type: object
      properties:
        title:
          type: string
          example: 'Гордість і упередження'
        author:
          type: integer
          example: 1
        genre:
          type: string
          example: 'роман'
        publication_date:
          type: string
          format: date
          example: '1813-08-01'
        price:
          type: integer
          example: 50000
        quantity:
          type: integer
          example: 246

    Author:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Джейн Остін'
    AuthorInput:
      type: object
      properties:
        name:
          type: string
          example: 'Джейн Остін'
    Order:
      type: object
      required:
        - order
      properties:
        order:
          type: array
          items:
            type: object
            required:
              - book_id
              - quantity
            properties:
              book_id:
                type: integer
              quantity:
                type: integer
    OrderResponse:
      type: object
      properties:
        order_id:
          type: integer
          example: 100
    OrderList:
      type: object
      properties:
        total_price:
          type: integer
          example: 80000
        created_at:
          type: string
          example: "2023-08-01T16:43:53.505662Z"
        invoice_id:
          type: string
          example: "2308012yKYfC7fhp4BKW"
        id:
          type: integer
          example: 1
        books:
          $ref: '#/components/schemas/Book'
        status:
          type: string
    UserRegisterInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    UserRegister:
      type: object
      properties:
        username:
          type: string
    UserTokenInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    UserToken:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
        email:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT